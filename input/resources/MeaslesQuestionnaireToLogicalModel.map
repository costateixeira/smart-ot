map "http://worldhealthorganization.github.io/smart-ot/StructureMap/MeaslesQuestionnaireToLogicalModel" = "MeaslesQuestionnaireToLogicalModel"

uses "http://hl7.org/fhir/StructureDefinition/QuestionnaireResponse" alias QuestionnaireResponse as source
uses "http://worldhealthorganization.github.io/smart-ot/StructureDefinition/SOTMeasles" alias MeaslesLogicalModel as target

group MeaslesQuestionnaireToLogicalModel(source qr : QuestionnaireResponse, target measlesLm : MeaslesLogicalModel) {
  qr.item as item where linkId.value in ('investigationForm') -> measlesLm as measlesLm then mapInvestigationForm(item, measlesLm) "setInvestigationform";
}

group mapInvestigationForm(source investigationForm, target measlesLm : MeaslesLogicalModel) {
  investigationForm.item as qrReportingSource where linkId.value in ('reportingSource') -> measlesLm.ReportingSource as lmReportingSource then mapReportingSource(qrReportingSource, lmReportingSource) "setReportingSource";
  investigationForm.item as qrDemographics where linkId.value in ('demographics') -> measlesLm.Demographics as lmDemographics then mapDemographics(qrDemographics, lmDemographics) "setDemographics";
  investigationForm.item as qrVaccinationStatus where linkId.value in ('vaccinationStatus') -> measlesLm.VaccinationStatus as lmVaccinationStatus then mapVaccinationStatus(qrVaccinationStatus, lmVaccinationStatus) "setVaccinationStatus";
  investigationForm.item as qrClinical where linkId.value in ('clinical') -> measlesLm.Clinical as lmClinical then mapClinical(qrClinical, lmClinical) "setClinical";
  investigationForm.item as qrLaboratoryResults where linkId.value in ('laboratoryResults') -> measlesLm.LaboratoryResults as lmLaboratoryResults then mapLaboratoryResults(qrLaboratoryResults, lmLaboratoryResults) "setLaboratoryResults";
  investigationForm.item as qrContactTracing where linkId.value in ('contactTracing') -> measlesLm.ContactTracing as lmContactTracing then mapContactTracing(qrContactTracing, lmContactTracing) "setContactTracing";
  investigationForm.item as qrEpiData where linkId.value in ('epiData') -> measlesLm.EpiData as lmEpiData then mapEpiData(qrEpiData, lmEpiData) "setEpiData";
  investigationForm.item as qrClassification where linkId.value in ('classification') -> measlesLm.Classification as lmClassification then mapClassification(qrClassification, lmClassification) "setClassification";

}

group mapReportingSource(source qrReportingSource, target lmReportingSource : ReportingSourceLogicalModel) {
  qrReportingSource.item as initialDiagnosis where linkId.value in ('initialDiagnosis') -> lmReportingSource.InitialDiagnosis = (initialDiagnosis.answer.valueCoding) "setInitialDiagnosis";
  qrReportingSource.item as reportedBy where linkId.value in ('reportedBy') -> lmReportingSource.ReportedBy = (reportedBy.answer.valueString) "setcaseID";
  qrReportingSource.item as qrReportingInstitution where linkId.value in ('reportingInstitution') -> lmReportingSource as lmReportingSource then mapReportingInstitution(qrReportingInstitution, lmReportingSource) "setReportingInstitution";
  qrReportingSource.item as dateOfConsultation where linkId.value in ('DateOfConsultation') -> lmReportingSource.DateOfConsultation = (dateOfConsultation.answer.valueDate) "setDateOfConsultation";
  qrReportingSource.item as dateOfHomeVisit where linkId.value in ('DateOfHomeVisit') -> lmReportingSource.DateOfHomeVisit = (dateOfHomeVisit.answer.valueDate) "setDateOfHomeVisit";
  qrReportingSource.item as dateReportedLocal where linkId.value in ('dateReported') -> lmReportingSource.DateReportedLocal = (dateReportedLocal.answer.valueDate) "setDateReportedLocal";
  qrReportingSource.item as dateReportedNational where linkId.value in ('DateReportedNational') -> lmReportingSource.DateReportedNational = (dateReportedNational.answer.valueDate) "setDateReportedNational";
  qrReportingSource.item as providerType where linkId.value in ('TypeOfProviderReporting') -> lmReportingSource.TypeOfProviderReporting = (providerType.answer.valueCoding) "setProviderType";
  qrReportingSource.item as detectedBy where linkId.value in ('DetectedBy') -> lmReportingSource.DetectedBy = (detectedBy.answer.valueCoding) "setProviderType";
}

group mapReportingInstitution(source qrReportingInstitution, target lmReportingSource : ReportingSourceLogicalModel) {
  qrReportingInstitution.item as reportingFacility where linkId.value in ('reportingFacility') -> lmReportingSource.HealthServiceName = (reportingFacility.answer.valueString) "setHealthFacilityname";
  qrReportingInstitution.item as telephone where linkId.value in ('telephone') -> create('ContactPoint') as lmTelephone, lmTelephone.value = (telephone.answer.valueString), lmReportingSource.HealthServiceTelephone = lmTelephone "setTelephone";
  qrReportingInstitution -> create('Address') as lmAddress then {
  qrReportingInstitution.item as country where linkId.value in ('country') -> lmAddress.country= (country.answer.valueString) "setCountry"; 
  qrReportingInstitution.item as municipality where linkId.value in ('municipality') -> lmAddress.city = (municipality.answer.valueString) "setCity";
  qrReportingInstitution.item as state where linkId.value in ('state') -> lmAddress.state = (state.answer.valueString) "setState";
  qrReportingInstitution.item as locality where linkId.value in ('locality') -> lmAddress.district = (locality.answer.valueString) "setLocality"; 
  qrReportingInstitution -> lmReportingSource.PlaceOfReporting = lmAddress "assignAddress";
  } "setAddress";
}


group mapDemographics(source qrDemographics, target lmDemographics : DemographicsLogicalModel) {
  qrDemographics.item as name        where linkId.value in ('name')            -> create('HumanName') as lmName, lmName.family=(name.answer.valueString), lmDemographics.Name =lmName  "setName";
  qrDemographics.item as guardian    where linkId.value in ('guardian')        -> create('HumanName') as lmGuardian,lmGuardian.family=(guardian.answer.valueString), lmDemographics.Guardian = lmGuardian "setGuardian";
  qrDemographics.item as address     where linkId.value in ('address')         -> create('Address') as lmAddress, lmAddress.text=(address.answer.valueString), lmDemographics.PlaceOfResidence = lmAddress "setAddress2";
  qrDemographics.item as telephone   where linkId.value in ('telephone')       -> create('ContactPoint') as lmTelephone, lmTelephone.value=(telephone.answer.valueString), lmDemographics.Telephone = lmTelephone "setTelephones";
  qrDemographics.item as landmark    where linkId.value in ('landmark')        -> lmDemographics.Landmark = (landmark.answer.valueString) "setLandmark2";
  qrDemographics.item as occupation  where linkId.value in ('occupation')      -> lmDemographics.Occupation = (occupation.answer.valueString) "setOccupation2";
  qrDemographics.item as location  where linkId.value in ('location living in') -> lmDemographics.LocalityType = (location.answer.valueCoding) "setLocalityType2";
  qrDemographics.item as workAddress where linkId.value in ('workAddress')     -> create('Address') as lmAddress, lmAddress.text=(workAddress.answer.valueString), lmDemographics.WorkAddress = lmAddress "setworkAddress2";
  qrDemographics.item as sex         where linkId.value in ('sex')             -> lmDemographics.Sex = (sex.answer.valueCoding) "setSex";
  qrDemographics.item as DoB         where linkId.value in ('DoB')             -> lmDemographics.DateOfBirth = (DoB.answer.valueDate) "setDoB";
  qrDemographics.item as ageOnset    where linkId.value in ('ageOnset')        -> create('Quantity') as lmAgeOnset, lmAgeOnset.value =(ageOnset.answer.valueInteger), lmDemographics.Age = lmAgeOnset  "setAgeOnset";
}

group mapVaccinationStatus(source qrVaccinationStatus, target lmVaccinationStatus: VaccinationStatusLogicalModel) {

}

group mapClinical(source qrClinical, target lmClinical: ClinicalLogicalModel) {

}

group mapLaboratoryResults(source qrLaboratoryResults, target lmLaboratoryResults: LaboratoryResultsLogicalModel) {

}

group mapContactTracing(source qrContactTracing, target lmContactTracing: ContactTracingLogicalModel) {

}

group mapEpiData(source qrEpiData, target lmEpiData: EpiDataLogicalModel) {

}

group mapClassification(source qrClassification, target lmClassification: ClassificationLogicalModel) {

}
